name: Build Calibre AppImage Release

on:
  push:
    branches:
      - "**" # Trigger on push to any branch
    tags:
      - "!**" # Do NOT trigger on tags (releases will be created manually or by another process)

jobs:
  build:
    name: Build AppImage
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Use the latest version of the checkout action

      - name: Install dependencies
        run: |
          # Install fuse and libfuse2 required for AppImage
          sudo apt-get update
          sudo apt-get install -y fuse libfuse2

      - name: Get Calibre version from README
        id: get_version # Assign an ID to this step to access its outputs
        run: |
          # Extract the version number following "Calibre:" in README.md
          # Assumes README.md contains a line like "Calibre: 6.25.0"
          VERSION=$(grep -oP "Calibre:\s*\K\S+" README.md)
          if [ -z "$VERSION" ]; then
            echo "::error::Could not find Calibre version in README.md. Ensure it has a line like 'Calibre: X.Y.Z'"
            exit 1
          fi
          echo "Calibre version found: $VERSION"
          # Set the version as a step output
          echo "CALIBRE_VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Make Calibre AppDir structure
        run: |
          set -x # Print commands as they are executed for debugging

          # Clean up previous build artifacts
          rm -rf build/

          # Create the main AppDir directory
          mkdir -p build/calibre.AppDir/

          # Create the desktop file dynamically
          cat > build/calibre.AppDir/calibre.desktop << 'EOF'
          [Desktop Entry]
          Type=Application
          Name=Calibre
          GenericName=E-book library management
          Comment=E-book library management: Convert, view, share, catalogue all your e-books
          Exec=calibre %F
          Icon=calibre
          MimeType=application/x-mobipocket-ebook;application/epub+zip;x-content/ebook-reader
          Categories=Office;Graphics;Viewer;
          X-GNOME-UsesNotifications=true
          Actions=Ebook-editor;Ebook-viewer;LRF-viewer;

          [Desktop Action Ebook-editor]
          Name=Ebook editor
          Exec=ebook-edit %f

          [Desktop Action Ebook-viewer]
          Name=Ebook viewer
          Exec=ebook-viewer %f

          [Desktop Action LRF-viewer]
          Name=LRF viewer
          Exec=lrfviewer %f
          EOF

          # Make the desktop file executable
          chmod +x build/calibre.AppDir/calibre.desktop

          # Download AppRun (runtime for the AppImage)
          # Using a specific release tag for stability
          curl --location -o build/calibre.AppDir/AppRun https://github.com/AppImage/AppImageKit/releases/download/continuous/AppRun-x86_64
          chmod +x build/calibre.AppDir/AppRun

          # Create the usr/bin directory inside the AppDir
          mkdir -p build/calibre.AppDir/usr/bin/

          # Change directory to where Calibre will be extracted
          cd build/calibre.AppDir/usr/bin/

          # Download and extract Calibre into usr/bin
          # Use the version obtained in the previous step
          CALIBRE_VERSION=${{ steps.get_version.outputs.CALIBRE_VERSION }}
          echo "Downloading and extracting Calibre version $CALIBRE_VERSION..."
          curl -o - https://download.calibre-ebook.com/$CALIBRE_VERSION/calibre-$CALIBRE_VERSION-x86_64.txz | tar -xJf -

          # Change back to the root of the repository
          cd ../../../../

          # Copy the Calibre icon into the AppDir
          # Adjust the source path if your Calibre installation structure is different
          cp build/calibre.AppDir/usr/bin/resources/content-server/calibre.png build/calibre.AppDir/

          # Copy the README.md into the AppDir
          cp README.md build/calibre.AppDir/

          # List contents of the AppDir for verification
          echo "Contents of build/calibre.AppDir:"
          ls -lah build/calibre.AppDir/
          echo "Contents of build/calibre.AppDir/usr/bin:"
          ls -lah build/calibre.AppDir/usr/bin/

      - name: Get appimagetool
        run: |
          set -x # Print commands as they are executed for debugging
          # Download the latest appimagetool
          wget https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage
          # Make it executable
          chmod +x appimagetool-x86_64.AppImage

      - name: Make AppImage
        run: |
          set -x # Print commands as they are executed for debugging
          # Run appimagetool on the created AppDir
          ./appimagetool-x86_64.AppImage build/calibre.AppDir/

      - name: List files and rename AppImage
        id: rename_appimage # Assign an ID to access outputs
        run: |
          set -x # Print commands as they are executed for debugging
          # Get the Calibre version again (or use the output from get_version step)
          CALIBRE_VERSION=${{ steps.get_version.outputs.CALIBRE_VERSION }}
          APPIMAGE_NAME="Calibre-$CALIBRE_VERSION-x86_64.AppImage"
          MD5_NAME="$APPIMAGE_NAME.md5"

          echo "Renaming AppImage to $APPIMAGE_NAME"
          # The default output name from appimagetool is usually AppDirName-architecture.AppImage
          mv Calibre-x86_64.AppImage "$APPIMAGE_NAME"

          echo "Creating MD5 checksum file $MD5_NAME"
          # Create the MD5 checksum
          md5sum "$APPIMAGE_NAME" > "$MD5_NAME"

          # List files in the current directory to confirm names
          ls -lah

          # Set the artifact names as step outputs
          echo "APPIMAGE_NAME=$APPIMAGE_NAME" >> $GITHUB_OUTPUT
          echo "MD5_NAME=$MD5_NAME" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release and Upload Assets
        id: create_release 
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.CALIBRE_VERSION }}
          name: Calibre AppImage v${{ steps.get_version.outputs.CALIBRE_VERSION }}
          body: |
            Automated build of Calibre AppImage version ${{ steps.get_version.outputs.CALIBRE_VERSION }}.

            **Note:** This is an unofficial build.
          draft: false
          prerelease: false
          files: | 
            ${{ steps.rename_appimage.outputs.APPIMAGE_NAME }}
            ${{ steps.rename_appimage.outputs.MD5_NAME }}

